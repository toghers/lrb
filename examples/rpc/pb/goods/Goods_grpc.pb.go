// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: goods.proto

package goods

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Goods_InsGoods_FullMethodName            = "/goods.Goods/InsGoods"
	Goods_DelGoods_FullMethodName            = "/goods.Goods/DelGoods"
	Goods_UpdGoods_FullMethodName            = "/goods.Goods/UpdGoods"
	Goods_SelGoods_FullMethodName            = "/goods.Goods/SelGoods"
	Goods_Login_FullMethodName               = "/goods.Goods/Login"
	Goods_SearchGood_FullMethodName          = "/goods.Goods/SearchGood"
	Goods_GetGoodsById_FullMethodName        = "/goods.Goods/GetGoodsById"
	Goods_DeductStock_FullMethodName         = "/goods.Goods/DeductStock"
	Goods_DeductStockRollback_FullMethodName = "/goods.Goods/DeductStockRollback"
)

// GoodsClient is the client API for Goods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsClient interface {
	InsGoods(ctx context.Context, in *CreateGoods, opts ...grpc.CallOption) (*CreateGoodsResp, error)
	DelGoods(ctx context.Context, in *DelGoodsInfo, opts ...grpc.CallOption) (*EmptyResp, error)
	UpdGoods(ctx context.Context, in *UpdateGoodsInfo, opts ...grpc.CallOption) (*GoodsResp, error)
	SelGoods(ctx context.Context, in *SelectGoodsInfo, opts ...grpc.CallOption) (*SelectGoodsResp, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	SearchGood(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	GetGoodsById(ctx context.Context, in *SelectByIdReq, opts ...grpc.CallOption) (*SelectByIdResp, error)
	DeductStock(ctx context.Context, in *DeductStockReq, opts ...grpc.CallOption) (*DeductStockResp, error)
	DeductStockRollback(ctx context.Context, in *DeductStockReq, opts ...grpc.CallOption) (*DeductStockResp, error)
}

type goodsClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsClient(cc grpc.ClientConnInterface) GoodsClient {
	return &goodsClient{cc}
}

func (c *goodsClient) InsGoods(ctx context.Context, in *CreateGoods, opts ...grpc.CallOption) (*CreateGoodsResp, error) {
	out := new(CreateGoodsResp)
	err := c.cc.Invoke(ctx, Goods_InsGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) DelGoods(ctx context.Context, in *DelGoodsInfo, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, Goods_DelGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) UpdGoods(ctx context.Context, in *UpdateGoodsInfo, opts ...grpc.CallOption) (*GoodsResp, error) {
	out := new(GoodsResp)
	err := c.cc.Invoke(ctx, Goods_UpdGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) SelGoods(ctx context.Context, in *SelectGoodsInfo, opts ...grpc.CallOption) (*SelectGoodsResp, error) {
	out := new(SelectGoodsResp)
	err := c.cc.Invoke(ctx, Goods_SelGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Goods_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) SearchGood(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, Goods_SearchGood_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsById(ctx context.Context, in *SelectByIdReq, opts ...grpc.CallOption) (*SelectByIdResp, error) {
	out := new(SelectByIdResp)
	err := c.cc.Invoke(ctx, Goods_GetGoodsById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) DeductStock(ctx context.Context, in *DeductStockReq, opts ...grpc.CallOption) (*DeductStockResp, error) {
	out := new(DeductStockResp)
	err := c.cc.Invoke(ctx, Goods_DeductStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) DeductStockRollback(ctx context.Context, in *DeductStockReq, opts ...grpc.CallOption) (*DeductStockResp, error) {
	out := new(DeductStockResp)
	err := c.cc.Invoke(ctx, Goods_DeductStockRollback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServer is the server API for Goods service.
// All implementations must embed UnimplementedGoodsServer
// for forward compatibility
type GoodsServer interface {
	InsGoods(context.Context, *CreateGoods) (*CreateGoodsResp, error)
	DelGoods(context.Context, *DelGoodsInfo) (*EmptyResp, error)
	UpdGoods(context.Context, *UpdateGoodsInfo) (*GoodsResp, error)
	SelGoods(context.Context, *SelectGoodsInfo) (*SelectGoodsResp, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	SearchGood(context.Context, *SearchRequest) (*SearchResponse, error)
	GetGoodsById(context.Context, *SelectByIdReq) (*SelectByIdResp, error)
	DeductStock(context.Context, *DeductStockReq) (*DeductStockResp, error)
	DeductStockRollback(context.Context, *DeductStockReq) (*DeductStockResp, error)
	mustEmbedUnimplementedGoodsServer()
}

// UnimplementedGoodsServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsServer struct {
}

func (UnimplementedGoodsServer) InsGoods(context.Context, *CreateGoods) (*CreateGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsGoods not implemented")
}
func (UnimplementedGoodsServer) DelGoods(context.Context, *DelGoodsInfo) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelGoods not implemented")
}
func (UnimplementedGoodsServer) UpdGoods(context.Context, *UpdateGoodsInfo) (*GoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdGoods not implemented")
}
func (UnimplementedGoodsServer) SelGoods(context.Context, *SelectGoodsInfo) (*SelectGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelGoods not implemented")
}
func (UnimplementedGoodsServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGoodsServer) SearchGood(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGood not implemented")
}
func (UnimplementedGoodsServer) GetGoodsById(context.Context, *SelectByIdReq) (*SelectByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsById not implemented")
}
func (UnimplementedGoodsServer) DeductStock(context.Context, *DeductStockReq) (*DeductStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeductStock not implemented")
}
func (UnimplementedGoodsServer) DeductStockRollback(context.Context, *DeductStockReq) (*DeductStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeductStockRollback not implemented")
}
func (UnimplementedGoodsServer) mustEmbedUnimplementedGoodsServer() {}

// UnsafeGoodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsServer will
// result in compilation errors.
type UnsafeGoodsServer interface {
	mustEmbedUnimplementedGoodsServer()
}

func RegisterGoodsServer(s grpc.ServiceRegistrar, srv GoodsServer) {
	s.RegisterService(&Goods_ServiceDesc, srv)
}

func _Goods_InsGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoods)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).InsGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_InsGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).InsGoods(ctx, req.(*CreateGoods))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_DelGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelGoodsInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).DelGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_DelGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).DelGoods(ctx, req.(*DelGoodsInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_UpdGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodsInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).UpdGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_UpdGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).UpdGoods(ctx, req.(*UpdateGoodsInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_SelGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectGoodsInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).SelGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_SelGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).SelGoods(ctx, req.(*SelectGoodsInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_SearchGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).SearchGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_SearchGood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).SearchGood(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_GetGoodsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsById(ctx, req.(*SelectByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_DeductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeductStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).DeductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_DeductStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).DeductStock(ctx, req.(*DeductStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_DeductStockRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeductStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).DeductStockRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_DeductStockRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).DeductStockRollback(ctx, req.(*DeductStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Goods_ServiceDesc is the grpc.ServiceDesc for Goods service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Goods_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goods.Goods",
	HandlerType: (*GoodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsGoods",
			Handler:    _Goods_InsGoods_Handler,
		},
		{
			MethodName: "DelGoods",
			Handler:    _Goods_DelGoods_Handler,
		},
		{
			MethodName: "UpdGoods",
			Handler:    _Goods_UpdGoods_Handler,
		},
		{
			MethodName: "SelGoods",
			Handler:    _Goods_SelGoods_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Goods_Login_Handler,
		},
		{
			MethodName: "SearchGood",
			Handler:    _Goods_SearchGood_Handler,
		},
		{
			MethodName: "GetGoodsById",
			Handler:    _Goods_GetGoodsById_Handler,
		},
		{
			MethodName: "DeductStock",
			Handler:    _Goods_DeductStock_Handler,
		},
		{
			MethodName: "DeductStockRollback",
			Handler:    _Goods_DeductStockRollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods.proto",
}
