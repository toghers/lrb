// Code generated by goctl. DO NOT EDIT.
// Source: goods.proto

package server

import (
	"context"

	"2106A-zg6/orderAndGoods/goodsproject/rpc/internal/logic"
	"2106A-zg6/orderAndGoods/goodsproject/rpc/internal/svc"
	"2106A-zg6/orderAndGoods/goodsproject/rpc/pb/goods"
)

type GoodsServer struct {
	svcCtx *svc.ServiceContext
	goods.UnimplementedGoodsServer
}

func NewGoodsServer(svcCtx *svc.ServiceContext) *GoodsServer {
	return &GoodsServer{
		svcCtx: svcCtx,
	}
}

func (s *GoodsServer) InsGoods(ctx context.Context, in *goods.CreateGoods) (*goods.CreateGoodsResp, error) {
	l := logic.NewInsGoodsLogic(ctx, s.svcCtx)
	return l.InsGoods(in)
}

func (s *GoodsServer) DelGoods(ctx context.Context, in *goods.DelGoodsInfo) (*goods.EmptyResp, error) {
	l := logic.NewDelGoodsLogic(ctx, s.svcCtx)
	return l.DelGoods(in)
}

func (s *GoodsServer) UpdGoods(ctx context.Context, in *goods.UpdateGoodsInfo) (*goods.GoodsResp, error) {
	l := logic.NewUpdGoodsLogic(ctx, s.svcCtx)
	return l.UpdGoods(in)
}

func (s *GoodsServer) SelGoods(ctx context.Context, in *goods.SelectGoodsInfo) (*goods.SelectGoodsResp, error) {
	l := logic.NewSelGoodsLogic(ctx, s.svcCtx)
	return l.SelGoods(in)
}

func (s *GoodsServer) Login(ctx context.Context, in *goods.LoginRequest) (*goods.LoginResponse, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *GoodsServer) SearchGood(ctx context.Context, in *goods.SearchRequest) (*goods.SearchResponse, error) {
	l := logic.NewSearchGoodLogic(ctx, s.svcCtx)
	return l.SearchGood(in)
}

func (s *GoodsServer) GetGoodsById(ctx context.Context, in *goods.SelectByIdReq) (*goods.SelectByIdResp, error) {
	l := logic.NewGetGoodsByIdLogic(ctx, s.svcCtx)
	return l.GetGoodsById(in)
}

func (s *GoodsServer) DeductStock(ctx context.Context, in *goods.DeductStockReq) (*goods.DeductStockResp, error) {
	l := logic.NewDeductStockLogic(ctx, s.svcCtx)
	return l.DeductStock(in)
}

func (s *GoodsServer) DeductStockRollback(ctx context.Context, in *goods.DeductStockReq) (*goods.DeductStockResp, error) {
	l := logic.NewDeductStockRollbackLogic(ctx, s.svcCtx)
	return l.DeductStockRollback(in)
}
