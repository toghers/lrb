// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package orderclient

import (
	"context"

	"2106A-zg6/orderAndGoods/goodsproject/order/pb/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateOrderReq    = order.CreateOrderReq
	CreateOrderResp   = order.CreateOrderResp
	DeleteRequest     = order.DeleteRequest
	DeleteResponse    = order.DeleteResponse
	OrderInfo         = order.OrderInfo
	SelectRequest     = order.SelectRequest
	SelectResponse    = order.SelectResponse
	UpOrderStatus     = order.UpOrderStatus
	UpOrderStatusResp = order.UpOrderStatusResp
	UpdateRequest     = order.UpdateRequest
	UpdateResponse    = order.UpdateResponse

	Order interface {
		CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error)
		UpdateOrder(ctx context.Context, in *UpOrderStatus, opts ...grpc.CallOption) (*UpOrderStatusResp, error)
		DelOrder(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
		UpdateOrders(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
		SelectOrder(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error)
		CreateOrderRoll(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

func (m *defaultOrder) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

func (m *defaultOrder) UpdateOrder(ctx context.Context, in *UpOrderStatus, opts ...grpc.CallOption) (*UpOrderStatusResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.UpdateOrder(ctx, in, opts...)
}

func (m *defaultOrder) DelOrder(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.DelOrder(ctx, in, opts...)
}

func (m *defaultOrder) UpdateOrders(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.UpdateOrders(ctx, in, opts...)
}

func (m *defaultOrder) SelectOrder(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.SelectOrder(ctx, in, opts...)
}

func (m *defaultOrder) CreateOrderRoll(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrderRoll(ctx, in, opts...)
}
